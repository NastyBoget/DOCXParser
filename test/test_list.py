import os
import unittest

from docx_parser.document_parser import DOCXParser

TEST_DIR = '../examples'


class TestList(unittest.TestCase):

    def test_list_1(self):
        parser = DOCXParser()
        path = os.path.join(TEST_DIR, "lists_1.docx")
        parser.parse(path)
        result = parser.get_lines_with_meta()
        self.assertEqual('Header 1', result[0]["text"])
        self.assertEqual('1)\tbla', result[1]["text"])
        self.assertEqual('1.\ttest', result[2]["text"])
        self.assertEqual('2.\ttest', result[3]["text"])
        self.assertEqual('2)\tbla', result[4]["text"])
        self.assertEqual('3)\tbla', result[5]["text"])
        self.assertEqual('1.\tbla', result[6]["text"])
        self.assertEqual('2.\tbla bla', result[7]["text"])
        self.assertEqual('2.1.\tbla bla bla', result[8]["text"])
        self.assertEqual('2.2.\tbla bla', result[9]["text"])
        self.assertEqual('2.2.1.\ttest test', result[10]["text"])
        self.assertEqual('2.2.2.\ttest text', result[11]["text"])
        self.assertEqual('2.2.2.1.\togo', result[12]["text"])
        self.assertEqual('2.2.2.2.\tmdaaa', result[13]["text"])
        self.assertEqual('2.2.2.3.\ttest go deeper', result[14]["text"])
        self.assertEqual('2.2.2.3.1.\tare you seriously?', result[15]["text"])
        self.assertEqual('2.2.2.3.1.1.\tno, SERIOUSLY??', result[16]["text"])
        self.assertEqual('2.2.2.3.1.1.1.\tthis is baaad list', result[17]["text"])
        self.assertEqual('2.2.2.3.2.\tnew item?', result[18]["text"])
        self.assertEqual('2.2.2.3.3.\tyou are very crazy', result[19]["text"])
        self.assertEqual('2.2.2.3.4.\tyou are very crazy', result[20]["text"])
        self.assertEqual('2.2.2.3.5.\tyou are very crazy', result[21]["text"])
        self.assertEqual('a)\tno', result[22]["text"])
        self.assertEqual('b)\tnono', result[23]["text"])
        self.assertEqual('c)\tnonono', result[24]["text"])
        self.assertEqual('2.2.2.4.\tnoooo', result[25]["text"])
        self.assertEqual('2.2.2.5.\treally?', result[26]["text"])
        self.assertEqual('2.2.3.\tha-ha', result[27]["text"])
        self.assertEqual('Text text', result[28]["text"])
        self.assertEqual('а. Пункт а', result[29]["text"])
        self.assertEqual('б. Пункт б', result[30]["text"])
        self.assertEqual('в. Пункт в', result[31]["text"])
        self.assertEqual('г. Пункт г', result[32]["text"])
        self.assertEqual('Test', result[33]["text"])
        self.assertEqual('Lorem ipsum', result[34]["text"])
        self.assertEqual('a)\ttest a', result[35]["text"])
        self.assertEqual('b)\ttest b', result[36]["text"])
        self.assertEqual('c)\ttest c', result[37]["text"])
        self.assertEqual('TEXT TEXT TEXT', result[38]["text"])
        self.assertEqual('2.2.4.\ttest', result[39]["text"])
        self.assertEqual('2.3.\ttest test', result[40]["text"])
        self.assertEqual('3.\tbla bla bla', result[41]["text"])
        self.assertEqual('4.\tand some test text', result[42]["text"])
        self.assertEqual('5.\tlorem ipsum', result[43]["text"])
        self.assertEqual('6.\tsome text', result[44]["text"])
        self.assertEqual('4)\ttest test', result[45]["text"])
        self.assertEqual('5)\ttest test test', result[46]["text"])

    def test_list_2(self):
        parser = DOCXParser()
        path = os.path.join(TEST_DIR, "lists_2.docx")
        parser.parse(path)
        result = parser.get_lines_with_meta()
        self.assertEqual('Header ', result[0]["text"])
        self.assertEqual('1.\tНАИМЕНОВАНИЕ, ШИФР ОКР, ОСНОВАНИЕ, ИСПОЛНИТЕЛЬ И СРОКИ ВЫПОЛНЕНИЯ ОКР', result[1]["text"])
        self.assertEqual('2.\tЦЕЛЬ ВЫПОЛНЕНИЯ ОКР, НАИМЕНОВАНИЕ И ИНДЕКС ИЗДЕЛИЯ', result[2]["text"])
        self.assertEqual('3.\tТактико-технические требования к изделию', result[3]["text"])
        self.assertEqual('3.1.\tСостав изделия', result[4]["text"])
        self.assertEqual('3.2.\tТребования назначения', result[5]["text"])
        self.assertEqual('3.2.1.\tТребования к возможностям и характеристикам Пользовательской подсистемы',
                         result[6]["text"])
        self.assertEqual('3.2.2.\tТребования к разделам и сервисам Сайта МО РФ', result[7]["text"])
        self.assertEqual('3.2.3.\tТребования к функциям мобильного приложения «Министерство обороны» ',
                         result[8]["text"])
        self.assertEqual('3.2.3.1.\tОбщие требования к приложению', result[9]["text"])
        self.assertEqual('3.2.3.2.\tТребования к совместимости', result[10]["text"])
        self.assertEqual('3.2.3.3.\tТребования к реакции на внешние прерывания', result[11]["text"])
        self.assertEqual('3.2.3.4.\tТребования к обеспечению постоянной обратной связи с пользователем',
                         result[12]["text"])
        self.assertEqual('3.2.3.5.\tТребования к размещению в магазинах приложений', result[13]["text"])
        self.assertEqual('3.2.3.6.\tТребования к дизайну и интерфейсу мобильного приложения «Министерство обороны»',
                         result[14]["text"])
        self.assertEqual('3.2.3.7.\tТребования к экрану загрузки ', result[15]["text"])
        self.assertEqual('3.2.3.8.\tТребования к главному экрану', result[16]["text"])
        self.assertEqual('3.2.3.9.\tТребования к разделу «Минобороны Инфо»', result[17]["text"])
        self.assertEqual('3.2.3.10.\tТребования к функциям кольца сайтов образовательных учреждений МО РФ',
                         result[18]["text"])
        self.assertEqual('3.2.3.10.1.\tТребования к возможностям типового сайта кольца образовательных учреждений '
                         'МО РФ', result[19]["text"])
        self.assertEqual('3.2.3.10.2.\tТребования к дизайну типового сайта кольца образовательных учреждений МО РФ',
                         result[20]["text"])
        self.assertEqual('3.2.3.10.3.\tТребования к структуре типового сайта кольца образовательных учреждений МО РФ',
                         result[21]["text"])
        self.assertEqual('1.\tО ВУЗе:', result[22]["text"])
        self.assertEqual('2.\tНовости', result[23]["text"])
        self.assertEqual('3.\tОбразование', result[24]["text"])
        self.assertEqual('3.1.\tОбразовательные программы (образовательные стандарты)', result[25]["text"])
        self.assertEqual('3.2.\tДополнительное образование', result[26]["text"])
        self.assertEqual('4.\tНаука', result[27]["text"])
        self.assertEqual('5.\tУчебно-материальная база', result[28]["text"])
        self.assertEqual('6.\tПоступающим', result[29]["text"])
        self.assertEqual('7.\tОбучающимся', result[30]["text"])
        self.assertEqual('8.\tКонтакты', result[31]["text"])
        self.assertEqual('9.\tВыдающиеся выпускники', result[32]["text"])
        self.assertEqual('Шаблон сайта учебного заведения среднего образования должен содержать типовые разделы:',
                         result[33]["text"])
        self.assertEqual('1.\tСведения об образовательной организации\xa0', result[34]["text"])
        self.assertEqual('2.\tНовости', result[35]["text"])
        self.assertEqual('3.\tОбразование\xa0', result[36]["text"])
        self.assertEqual('3.1.\tОбразовательные стандарты\xa0', result[37]["text"])
        self.assertEqual('3.2.\tМатериально-техническое обеспечение и оснащенность образовательного процесса',
                         result[38]["text"])
        self.assertEqual('3.3.\tПлатные образовательные услуги\xa0', result[39]["text"])
        self.assertEqual('4.\tПоступающим', result[40]["text"])
        self.assertEqual('4.1.\tПриём в училище (школу, пансион, корпус)', result[41]["text"])
        self.assertEqual('4.2.\tВакантные места для приема (перевода)\xa0', result[42]["text"])
        self.assertEqual('5.\tУченикам', result[43]["text"])
        self.assertEqual('5.1.\tСтипендии и иные виды материальной поддержки\xa0', result[44]["text"])
        self.assertEqual('5.2.\tСекции, кружки, клубы\xa0', result[45]["text"])
        self.assertEqual('5.3.\tПравила внутреннего распорядка', result[46]["text"])
        self.assertEqual('6.\tКонтакты', result[47]["text"])
        self.assertEqual('3.2.3.11.\tТребования к функциям кольца сайтов подразделений и организаций МО РФ',
                         result[48]["text"])
        self.assertEqual('3.2.3.12.\tТребования к функциям сайта «Жилье военнослужащим»', result[49]["text"])
        self.assertEqual('3.2.3.12.1.\tТребования к возможностям сайта «Жилье военнослужащим»', result[50]["text"])
        self.assertEqual('В Систему должен входить сайт «Жилье военнослужащим». Сайт должен располагаться на поддомене '
                         'dom.mil.ru. ', result[51]["text"])
        self.assertEqual('3.2.3.12.2.\tТребования к структуре сайта «Жилье военнослужащим»', result[52]["text"])
        self.assertEqual('Сайт «Жилье военнослужащим» должен иметь следующую структуру: ', result[53]["text"])
        self.assertEqual('1.\tИнформация', result[54]["text"])
        self.assertEqual('2.\tОбеспечение жильем', result[55]["text"])
        self.assertEqual('2.1.\tПостоянное жилье', result[56]["text"])
        self.assertEqual('2.2.\tСпециализированный жилищный фонд', result[57]["text"])
        self.assertEqual('3.\tНакопительно-ипотечная система', result[58]["text"])
        self.assertEqual('4.\tВопросы и ответы', result[59]["text"])
        self.assertEqual('5.\tЕдиный реестр', result[60]["text"])
        self.assertEqual('6.\tДействующие нормативные правовые документы', result[61]["text"])
        self.assertEqual('3.2.3.12.3.\tСервис «Единый реестр жилья военнослужащих»', result[62]["text"])
        self.assertEqual('3.2.3.12.4.\tСервис «Калькулятор жилищных субсидий»', result[63]["text"])
        self.assertEqual('3.2.4.\tТребования к возможностям и характеристикам Служебной подсистемы', result[64]["text"])
        self.assertEqual('3.3.\tТребования радиоэлектронной защиты', result[65]["text"])
        self.assertEqual('Требования не предъявляются. ', result[66]["text"])
        self.assertEqual('3.4.\tТребования живучести и стойкости к внешним воздействиям', result[67]["text"])
        self.assertEqual('3.5.\tТребования надежности', result[68]["text"])
        self.assertEqual('3.6.\tТребования эргономики, обитаемости и технической эстетики', result[69]["text"])
        self.assertEqual('3.7.\tТребования к эксплуатации, хранению, удобству технического обслуживания и ремонта',
                         result[70]["text"])
        self.assertEqual('3.8.\tТребования транспортабельности', result[71]["text"])
        self.assertEqual('Изделие должно допускать транспортирование в тарной упаковке автомобильным, железнодорожным, '
                         'водным и авиационным видами транспорта в средних условиях по ГОСТ В 9.001 в соответствии с '
                         'правилами, действующими на соответствующем виде транспорта.', result[72]["text"])
        self.assertEqual('В транспортных средствах, где перевозится изделие, не должно быть паров кислот, щелочей или '
                         'других химически активных веществ, пары и газы которых могут вызвать коррозию.',
                         result[73]["text"])
        self.assertEqual('3.9.\tТребования безопасности', result[74]["text"])
        self.assertEqual('3.10.\tТребования к обеспечению режима секретности', result[75]["text"])
        self.assertEqual('3.11.\tТребования защиты от ИТР', result[76]["text"])
        self.assertEqual('3.12.\tТребования стандартизации, унификации и каталогизации', result[77]["text"])
        self.assertEqual('3.13.\tТребования технологичности', result[78]["text"])
        self.assertEqual('3.14.\tКонструктивные требования', result[79]["text"])
        self.assertEqual('3.15.\tТребования к наполнению и обеспечению доступности компонент Системы',
                         result[80]["text"])
        self.assertEqual('4.\tТехнико-экономические требования', result[81]["text"])
        self.assertEqual('5.\tТребования к видам обеспечения', result[82]["text"])
        self.assertEqual('6.\tТребования к сырью, материалам и комплектующим изделиям', result[83]["text"])
        self.assertEqual('Сырье, материалы, комплектующие изделия должны соответствовать «Перечню электрорадиоизделий '
                         '(ЭРИ), разрешенных для применения при разработке и модернизации военной аппаратуры, приборов '
                         'и другой военной техники.', result[84]["text"])
        self.assertEqual('7.\tТребования к консервации, упаковке и маркировке', result[85]["text"])
        self.assertEqual('8.\tТребования к учебно-тренировочным средствам', result[86]["text"])
        self.assertEqual('9.\tСпециальные требования', result[87]["text"])
        self.assertEqual('10.\tТребования к защите государственной тайны при выполнении ОКР', result[88]["text"])
        self.assertEqual('11.\tТребования к порядку разработки конструкторской документации на военное время',
                         result[89]["text"])
